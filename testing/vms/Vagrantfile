# -*- mode: ruby -*-
# vi: set ft=ruby :

DEFAULT_DD_ENV = {
    DD_SITE: "datadoghq.com",
    DD_ENV: "test",
    DD_TAGS: "[datacenter:local]", # must be a valid yaml list [a:b, c:d]. Used in the official role
    DD_HOST_TAGS: "env:test,datacenter:local" # Comma separated. Used in the script installer
}
RUNTIME_DD_ENV = DEFAULT_DD_ENV.merge(ENV).select { |k, v| k.start_with?('DD_') }

DEFAULT_VECTOR_ENV = {}
RUNTIME_VECTOR_ENV = DEFAULT_VECTOR_ENV.merge(ENV).select { |k, v| k.start_with?('VECTOR_') }

DEFAULT_VM_CONFIG = {
    cpu: {
        count: 2,
        execution_cap: 75,
    },
    memory: "1024",
}
BOXES = [
    {
        name: "ubuntu2004",
        hostname: "ubuntu2004",
        box: "ubuntu/focal64",
        vm: DEFAULT_VM_CONFIG,
    },
    {
        name: "ubuntu1804",
        hostname: "ubuntu1804",
        box: "ubuntu/bionic64",
        vm: DEFAULT_VM_CONFIG,
    },
    # Currently the vector install fails due to a CA certifcate issue. Pretty sure Centos8 ships
    # old CAs
    {
        name: "centos8",
        hostname: "centos8",
        box: "centos/8",
        vm: DEFAULT_VM_CONFIG,
    },
    {
        name: "centoss8",
        hostname: "centoss8",
        box: "centos/stream8",
        vm: DEFAULT_VM_CONFIG,
    },
    # Currently the vector install fails due to a CA certifcate issue. Pretty sure Centos8 ships
    # old CAs
    {
        name: "centos7",
        hostname: "centos7",
        box: "centos/7",
        vm: DEFAULT_VM_CONFIG,
    },
]

Vagrant.configure("2") do |vagrant|
    BOXES.each_index do |box_index|
        config = BOXES[box_index]
        vagrant.vm.define config[:name] do |machine|
            machine.vm.box = config[:box]
            machine.vm.hostname = config[:hostname]
            machine.vm.provider "virtualbox" do |vb|
                vb.name = config[:hostname]
                vb.cpus = config[:vm][:cpu][:count]
                vb.memory = config[:vm][:memory]
                vb.customize ["modifyvm", :id, "--cpuexecutioncap", "#{config[:vm][:cpu][:execution_cap]}"]
              end

            # Only provision the machines after the last VM is up and ready. This
            # let's us take advantage of Ansible's parallelism
            if box_index == BOXES.length - 1
                machine.vm.provision :ansible do |ansible|
                    ansible.playbook = "provisioning/ansible/playbook.yaml"
                    ansible.config_file = "provisioning/ansible/ansible.cfg"
                    ansible.limit = "all"
                    # ansible.verbose = "v"
                    ansible.extra_vars = {
                        vagrant: {
                            datadog: {
                                env: RUNTIME_DD_ENV,
                                install_agent: true,
                                install_agent_via_role: true,
                                install_agent_via_script: false,
                            },
                            vector: {
                                env: RUNTIME_VECTOR_ENV,
                                install_agent: true,
                            },
                        },
                    }
                end
            end
        end
    end
end
