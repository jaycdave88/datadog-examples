version: '3'
services:
  datadog:
    container_name: datadog-agent
    image: gcr.io/datadoghq/agent:7
    environment:
      ## GLOBALS
      DD_API_KEY: <api key> # https://app.datadoghq.com/organization-settings/api-keys
      DD_ENV: <env> # dev
      DD_TAGS: "<tags>" # team:devops
      DD_AC_EXCLUDE: name:datadog-agent # exclude this container from data collection
      ## TAGS https://docs.datadoghq.com/getting_started/tagging/assigning_tags/?tab=containerizedenvironments
      DD_DOCKER_LABELS_AS_TAGS: '{"*":"%%label%%"}'
      ## LOGS https://docs.datadoghq.com/agent/docker/log/
      DD_LOGS_ENABLED: true
      DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL: true
      ## LIVE PROCESSES https://docs.datadoghq.com/graphing/infrastructure/process/?tab:docker
      DD_PROCESS_AGENT_ENABLED: true
      ## DOGSTATSD
      DD_DOGSTATSD_NON_LOCAL_TRAFFIC: true
      ## APM
      DD_APM_ENABLED: true
      DD_APM_NON_LOCAL_TRAFFIC: true
      ## Network Performance Monitoring.
      ## Running this on a Mac? Set this value to false
      DD_SYSTEM_PROBE_ENABLED: true
    security_opt:
      - apparmor:unconfined
    cap_add:
      - SYS_ADMIN
      - SYS_RESOURCE
      - SYS_PTRACE
      - NET_ADMIN
      - NET_BROADCAST
      - NET_RAW
      - IPC_LOCK
      - CHOWN
    ports:
      - 127.0.0.1:8125:8125/udp # Dogstatsd
      - 127.0.0.1:8126:8126/tcp # APM
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup:/host/sys/fs/cgroup:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /etc/passwd:/etc/passwd:ro # Live Processes
      - /sys/kernel/debug:/sys/kernel/debug # NPM
      - ./data/agent/conf.d:/conf.d:rw
      - ./data/logs:/data/logs:rw
    networks:
      - app
  centrifugo:
    image: centrifugo/centrifugo:v3.0.5
    container_name: centrifugo
    volumes:
      - ./docker/conf/centrifugo.json:/centrifugo/config.json
    command: centrifugo -c config.json
    ports:
      - 8001:8001
    ulimits:
      nofile:
        soft: 65535
        hard: 65535
    networks:
      - app

  pg:
    image: postgres:13.3-alpine
    container_name: pg
    environment:
      - POSTGRES_DB=app_db
      - POSTGRES_USER=app_user
      - POSTGRES_PASSWORD
      - PAGER=less
      - POSTGRES_HOST_AUTH_METHOD=trust
    expose:
      - "5432"
    ports:
      - "5432:5432"
    volumes:
      - shared-data:/var/lib/postgresql
    networks:
      - app

  app:
    container_name: app
    build:
      context: ./docker
      dockerfile: Dockerfile
    expose:
      - 9000
    depends_on:
      - pg
      - nginx
    environment:
      DB_CONNECTION: pgsql
      DB_HOST: pg
      DB_PORT: 5432
      DB_DATABASE: app_db
      DB_USERNAME: app_user
      DB_PASSWORD: ''
      DD_AGENT_HOST: datadog-agent
      DD_TRACE_DEBUG: "false"
      DD_PROFILING_ENABLED: "true"
      # DD_TRACE_NO_AUTOLOADER: "true"
      DD_SERVICE: php8-laravel8
      DD_VERSION: "1.0.0"
    volumes:
      - ./app/:/app:delegated
      - ./data/logs:/data/logs:rw
      - ./docker/entrypoints/app.sh:/entrypoint.sh:ro
    entrypoint: /entrypoint.sh
    networks:
      - app
    labels:
      # Since we're also running scripts out of the same container as the website, we need to
      # direct the logs from the script into a shared file between the Agent and the app container
      # to collect them. We do this using Autodiscovery via Docker labels.
      # https://docs.datadoghq.com/agent/docker/integrations/?tab=docker
      com.datadoghq.ad.logs: >-
        [{
          "source": "php",
          "service": "demo-script"
        }, {
          "source": "php",
          "service": "demo-script",
          "type": "file",
          "path": "/data/logs/demo-script.log"
        }]

  nginx:
    container_name: nginx
    image: nginx:1.17.2-alpine
    ports:
      - "80:80"
    expose:
      - 80
    volumes:
      - ./app/:/app:delegated
      - ./docker/conf/nginx.conf:/etc/nginx/conf.d/default.conf
    restart: on-failure
    networks:
      - app

volumes:
  shared-data:

networks:
  app: